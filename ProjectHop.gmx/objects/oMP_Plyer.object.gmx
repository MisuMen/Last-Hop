<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite13</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index=-1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar MPX, MPY, MPZ, MPR;
MPX[99]=0
MPY[99]=0
MPZ[99]=0
MPR[99]=room
Map_PI=1
MOVE=0
ACTIVE=1
trans=1
anim = 0
////////////////////////////////////
d3d_start()
d3d_set_hidden(1)

texture_set_repeat(1)
texture_set_blending(1)
//draw_set_alpha_test(1)
ss = surface_create(960,540)
z = 48
dir = 0
dist = 64

model1 = d3d_model_create()
global.model2 = d3d_model_create()
model3 = d3d_model_create()
global.model4 = d3d_model_create()
global.tex01 = sprite_get_texture(tex_grass,0)
d3d_model_wall(model1,0,1,1.2,0,-1,-1.2,1,1)
d3d_model_wall(global.model4,0,-8,128,0,8,0,1,1)
d3d_model_cylinder(global.model2,-8,-8,-1,8,8,1,1,1,1,20)
d3d_model_floor(model3,-1024,-1024,0,1024,1024,0,1,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(MPR[Map_PI])
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera movement
dir = dir mod 360
var kp = keyboard_check(vk_down)-keyboard_check(vk_up);
x += lengthdir_x(kp,-dir)
y += lengthdir_y(kp,-dir)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Path movement
if ACTIVE {trans-=0.05; if trans&lt;=0{MOVE=0; ACTIVE=0}}

if MOVE==0
{
if mouse_check_button_pressed(mb_left) &amp;&amp; mouse_y &gt; view_yview[0]+(350*1)
{
 if mouse_x &gt; view_xview[0]+(30*1) &amp;&amp; mouse_x &lt; view_xview[0]+(300*1){MOVE=2; Map_PI+=1}//up
 if mouse_x &gt; view_xview[0]+(330*1) &amp;&amp; mouse_x &lt; view_xview[0]+(620*1){if MPR[Map_PI]!=-1 {MOVE=3; alarm[0]=100}}
 if mouse_x &gt; view_xview[0]+(650*1) &amp;&amp; mouse_x &lt; view_xview[0]+(940*1){MOVE=1; Map_PI-=1}//down
}
}
if MOVE==1
{
 if Map_PI == 0{Map_PI=1; exit}
 var d = point_direction(x,y,MPX[Map_PI],MPY[Map_PI]);
  

 x += lengthdir_x(2,d);
 if d != 0 || d != 90 || d != 180 || d != 270
 {x = scr_path_x(MPX[Map_PI+1],MPY[Map_PI+1],MPX[Map_PI],MPY[Map_PI],x,y,MPZ[Map_PI]);}
 y += lengthdir_y(2,d);
 if d != 0 || d != 90 || d != 180 || d != 270
 {y = scr_path_y(MPX[Map_PI+1],MPY[Map_PI+1],MPX[Map_PI],MPY[Map_PI],x,y,MPZ[Map_PI]);}
 if point_distance(x,y,MPX[Map_PI],MPY[Map_PI])&lt;1{MOVE=0}
}
if MOVE==2
{
 var d = point_direction(x,y,MPX[Map_PI],MPY[Map_PI]);
 x += lengthdir_x(2,d);
 if d != 0 || d != 90 || d != 180 || d != 270
 {x = scr_path_x(MPX[Map_PI-1],MPY[Map_PI-1],MPX[Map_PI],MPY[Map_PI],x,y,MPZ[Map_PI]);}
 y += lengthdir_y(2,d);
 if d != 0 || d != 90 || d != 180 || d != 270
 {y = scr_path_y(MPX[Map_PI-1],MPY[Map_PI-1],MPX[Map_PI],MPY[Map_PI],x,y,MPZ[Map_PI]);}
 if point_distance(x,y,MPX[Map_PI],MPY[Map_PI])&lt;1{MOVE=0}
}
if MOVE==3
{
 trans+=0.05
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_model_clear(model1)
d3d_model_clear(global.model2)
d3d_model_destroy(model1)
d3d_model_destroy(global.model2)
d3d_model_clear(model3)
d3d_model_destroy(model3)
d3d_model_clear(global.model4)
d3d_model_destroy(global.model4)
surface_free(ss)
d3d_set_fog(0,0,0,0)
draw_texture_flush()
d3d_end()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//shader_set(shader0)
draw_surface_stretched(ss,0,0,960,540)
//shader_reset()
draw_set_alpha(0.3)
draw_roundrect_colour(view_xview[0]+32,view_yview[0]+350,view_xview[0]+300,view_yview[0]+460,c_white,c_white,0)
//draw_roundrect_colour(view_xview[0]+330,view_yview[0]+350,view_xview[0]+620,view_yview[0]+460,c_ltgray,c_ltgray,0)
draw_roundrect_colour(view_xview[0]+650,view_yview[0]+350,view_xview[0]+940,view_yview[0]+460,c_white,c_white,0)

draw_roundrect_colour(view_xview[0]+32,view_yview[0]+30,view_xview[0]+250,view_yview[0]+320,c_teal,c_teal,0)
draw_roundrect_colour(view_xview[0]+700,view_yview[0]+30,view_xview[0]+940,view_yview[0]+320,c_teal,c_teal,0)

draw_set_alpha(trans)
draw_rectangle_colour(-32,-32,1050,1050,c_white,c_white,c_white,c_white,0)
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///d3d
var xx, yy, ang;
var xxx, yyy, zzz;
//Entities position
xx = x+lengthdir_x(4,180)
yy = y+lengthdir_y(4,180)
ang = 24;
//Camera position
xxx = cos(dir/57.25)* cos(ang/50);
yyy = sin(dir/57.25)* cos(ang/50);
zzz = sin(ang/50);

surface_set_target(ss)
draw_clear_alpha(0,0)
d3d_set_projection_ext(xx+(xxx*dist),yy+(yyy*dist),z+(zzz*dist),xx,yy,z,0,0,1,75,
window_get_width()/window_get_height(),0.5,501)
d3d_set_hidden(1)

anim+=0.2
anim = anim mod 7;

draw_set_colour(c_white)
d3d_transform_set_identity()
d3d_transform_add_scaling(8,8,16)
d3d_transform_add_translation(x,y,20)
d3d_model_draw(model1,0,0,0,sprite_get_texture(tex_player,anim))//
d3d_transform_set_identity()

draw_set_colour(c_green)
d3d_model_draw(model3,0,0,0,-1)
with(stem){d3d_model_draw(global.model4,x,y,0,global.tex01)}
draw_set_colour(c_white)

with (plate1) event_perform(ev_draw,0)
surface_reset_target()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
